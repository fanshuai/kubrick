"""
Django settings for kubrick project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
import sys
import logging
from django.utils.translation import gettext_lazy as _

from kubrick.initialize import (
    CONFIG, RUN_ENV, RUN_ENV_LOWER, VERSION,
    BASE_DIR, LOGS_DIR, TEMP_DIR, HOST_NAME,
    IS_DEBUG, IS_DEV_ENV, IS_SIT_ENV, IS_PROD_ENV,
    ALIYUN_AK, ALIYUN_SECRET, ALIOSS_BUCKET_NAME, ALIOSS_ENDPOINT_PUBLIC,
)
from kubrick.profiling import (
    SILKY_META,
    SILKY_AUTHENTICATION,
    SILKY_AUTHORISATION,
    SILKY_PERMISSIONS,
    SILKY_INTERCEPT_FUNC,
    SILKY_PYTHON_PROFILER_RESULT_PATH,
    SILKY_PYTHON_PROFILER_BINARY,
    SILKY_PYTHON_PROFILER,
)

from server.djextend.drfapi import drf_throttle
from server.djextend.drfapi.drf_const import ALLOW_CORS_HEADERS, EXPAND_CORS_HEADERS
from server.constant.djalias import DBAlias, CacheAlias

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/zh-hans/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# from django.core.management.utils import get_random_secret_key
SECRET_KEY = CONFIG('DJANGO.SECRET_KEY')
# https://pypi.org/project/django-nacl-fields/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = IS_DEBUG

APPEND_SLASH = False
ALLOWED_HOSTS = CONFIG('DJANGO.ALLOWED_HOSTS')


# https://docs.djangoproject.com/zh-hans/3.0/ref/settings/#email
EMAIL_HOST = CONFIG('EMAIL.HOST')
EMAIL_PORT = CONFIG('EMAIL.PORT')
EMAIL_HOST_USER = CONFIG('EMAIL.USER')
EMAIL_HOST_PASSWORD = CONFIG('EMAIL.PWD')
EMAIL_USE_SSL = CONFIG('EMAIL.USE_SSL')
EMAIL_FILE_PATH = TEMP_DIR
EMAIL_TIMEOUT = 8

SERVER_EMAIL = CONFIG('EMAIL.SERVER_EMAIL')
DEFAULT_FROM_EMAIL = CONFIG('EMAIL.DEFAULT_FROM')
EMAIL_SUBJECT_PREFIX = f'[{RUN_ENV}:{VERSION}:{HOST_NAME}] '
MANAGERS = ADMINS = [tuple(developer) for developer in CONFIG('ADMINS')]

# https://docs.djangoproject.com/zh-hans/3.0/topics/http/sessions/
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
SESSION_CACHE_ALIAS = CacheAlias.Session.value
if IS_PROD_ENV:
    SESSION_COOKIE_NAME = 'kusid'
    SESSION_COOKIE_DOMAIN = '.ifand.com'
else:
    SESSION_COOKIE_NAME = f'kusid-{RUN_ENV_LOWER}'

AUTH_USER_MODEL = 'account.AuthUser'


INSTALLED_APPS = [
    'django.contrib.admin',  # be first
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.admindocs',
    #########################
    'django_celery_results',
    'rest_framework',
    'django_filters',
    'crispy_forms',
    'corsheaders',
    'drf_yasg',
    'silk',
    #########################
    'server.applibs.abasepp',
    'server.applibs.account',
    'server.applibs.billing',
    'server.applibs.monitor',
    'server.applibs.outside',
    'server.applibs.release',
    'server.applibs.convert',
    #########################
    'django_celery_beat',  # be last
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  #
    'corsheaders.middleware.CorsMiddleware',  #
    # 'django.contrib.sessions.middleware.SessionMiddleware',
    'server.djextend.middleware.TokenSessionMiddleware',  #
    'django.middleware.common.CommonMiddleware',
    'corsheaders.middleware.CorsPostCsrfMiddleware',  #
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware',  # Profiling, depend: user auth
    'server.djextend.middleware.CustomMiddleware',  # depend: user auth
    'server.djextend.middleware.APIExceptionMiddleware',  #
]

# Application definition
ROOT_URLCONF = 'kubrick.urls'
WSGI_APPLICATION = 'kubrick.wsgi.application'

# Database
# https://docs.djangoproject.com/zh-hans/3.0/ref/settings/#databases

DATABASES = {
    DBAlias.Default.value: {  # 主库
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': CONFIG('DATABASES.KUBRICK.NAME'),
        'USER': CONFIG('DATABASES.KUBRICK.USER'),
        'PASSWORD': CONFIG('DATABASES.KUBRICK.PWD'),
        'HOST': CONFIG('DATABASES.KUBRICK.HOST'),
        'PORT': CONFIG('DATABASES.KUBRICK.PORT'),
    },
    DBAlias.Replica.value: {  # 只读库
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': CONFIG('DATABASES.KUBRICK.NAME'),
        'USER': CONFIG('DATABASES.KUBRICK.USER'),
        'PASSWORD': CONFIG('DATABASES.KUBRICK.PWD'),
        'HOST': CONFIG('DATABASES.KUBRICK.HOST'),
        'PORT': CONFIG('DATABASES.KUBRICK.PORT'),
    },
}
if IS_PROD_ENV and sys.argv[:2] == ['manage.py', 'dbshell']:
    DATABASES[DBAlias.Default.value] = DATABASES[DBAlias.Replica.value]
    print(f"{'-' * 60} \n ##### production dbshell use replica database ~ \n{'-' * 60}")
elif IS_PROD_ENV and sys.argv[:2] == ['manage.py', 'migrate']:
    if len(sys.argv) > 2 and not sys.argv[2].startswith('--'):
        print(f"=====> django migrate params: {sys.argv}")
        print(f"{'!' * 60} \n ##### production migrate do not support unapply !!! \n{'!' * 60}")
        raise Exception(f'production migrate do not support unapply !!!')
elif IS_PROD_ENV and sys.argv[:2] == ['manage.py', 'shell']:
    print(f"{'#' * 60} \n ##### production shell, be careful! \n{'#' * 60}")

DATABASE_ROUTERS = ['server.djextend.db_router.DBMainRouter']

# CACHES
# https://docs.djangoproject.com/zh-hans/3.0/topics/cache/
# django-redishttp://niwinz.github.io/django-redis/latest/
CACHES = {
    cache_alias: {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{CONFIG('REDIS.HOST')}:{CONFIG('REDIS.PORT')}/{cache_db}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.HerdClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 100},
            'CACHE_HERD_TIMEOUT': 10,
        }
    } for cache_db, cache_alias in enumerate([
        CacheAlias.Default.value,
        CacheAlias.Session.value,
        CacheAlias.Throttle.value,
    ], start=5)
}


# Password validation
# https://docs.djangoproject.com/zh-hans/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
# https://docs.djangoproject.com/en/3.1/ref/contrib/staticfiles/
STATIC_URL = '/assets/' if IS_PROD_ENV else f'/assets-{RUN_ENV_LOWER}/'
STATIC_ROOT = os.path.join(BASE_DIR, 'frontend', 'public', 'assets')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'frontend', 'public', 'static')]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'frontend/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'server.djextend.middleware.get_user_agents',  #
            ],
        },
    },
]


# https://pypi.org/project/django-hashid-field/
HASHID_FIELD_ALLOW_INT_LOOKUP = False  # !
HASHID_FIELD_SALT = SECRET_KEY


# Internationalization
# https://docs.djangoproject.com/zh-hans/3.0/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'  # 'en-us'
LANGUAGES = [
    ('zh-Hans', _('Chinese'))
]
TIME_ZONE = 'Asia/Shanghai'  # 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# http://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'server.djextend.drfapi.renderer.APIJSONRenderer',  #
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': (
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ),
    'DEFAULT_THROTTLE_RATES': drf_throttle.THROTTLE_RATES_DICT,
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'server.djextend.drfapi.paginate.CustomPagination',
}

CSRF_USE_SESSIONS = False
# https://pypi.python.org/pypi/django-cors-headers
CORS_ALLOW_CREDENTIALS = True
if IS_DEV_ENV:
    CORS_ORIGIN_ALLOW_ALL = True
else:
    CORS_ORIGIN_WHITELIST = CONFIG('DJANGO.CORS_ORIGIN_WHITELIST')
    CSRF_TRUSTED_ORIGINS = CORS_ORIGIN_WHITELIST
CORS_ALLOW_HEADERS = ALLOW_CORS_HEADERS
CORS_EXPOSE_HEADERS = EXPAND_CORS_HEADERS  # 跨域获取请求头

# https://github.com/aliyun/django-oss-storage
MEDIA_URL = '/media/' if IS_PROD_ENV else f'/media-{RUN_ENV_LOWER}/'
DEFAULT_FILE_STORAGE = 'server.djextend.backends.storage.CDNOssMediaStorage'
OSS_ACCESS_KEY_ID = ALIYUN_AK
OSS_ACCESS_KEY_SECRET = ALIYUN_SECRET
OSS_ENDPOINT = ALIOSS_ENDPOINT_PUBLIC
OSS_BUCKET_NAME = ALIOSS_BUCKET_NAME

# https://docs.djangoproject.com/zh-hans/3.0/topics/logging/
DJANGO_LOG_LEVEL = os.getenv('DJANGO_LOG_LEVEL', 'INFO')
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'basic': {
            'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s',
        },
        'verbose': {
            # 'format': '%(levelname)s %(asctime)s %(module)s %(process)d %(thread)d %(message)s',
            'format': '%(levelname)-8s [%(asctime)s] [%(request_id)s] '
                      '%(process)-6d %(module)s %(thread)d %(name)s: %(message)s',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        },
        'request_id': {  #
            '()': 'server.djextend.log_reqid.RequestIDFilter'
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'filters': ['request_id'],  #
            'formatter': 'verbose'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, f'kubrick-django.{HOST_NAME}.log'),
            'filters': ['request_id'],  #
            'formatter': 'verbose',
            'when': 'D',
        },
        'file-api': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, f'kubrick-api.{HOST_NAME}.log'),
            'filters': ['request_id'],  #
            'formatter': 'verbose',
            'when': 'D',
        },
        'file-debug': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, f'kubrick-debug.{HOST_NAME}.log'),
            'filters': ['request_id'],  #
            'formatter': 'verbose',
            'when': 'D',
        },
        'file-notice': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, f'kubrick-notice.{HOST_NAME}.log'),
            'filters': ['request_id'],  #
            'formatter': 'verbose',
            'when': 'D',
        },
        'file-celery': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, f'kubrick-celery.{HOST_NAME}.log'),
            'filters': ['request_id'],  #
            'formatter': 'verbose',
            'when': 'D',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'email_backend': 'django.core.mail.backends.filebased.EmailBackend',
            'include_html': True,
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console', 'mail_admins'],
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False,
        },
        'django.request': {
            'handlers': ['file', 'console'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False,
        },
        'kubrick.api': {  # custom
            'handlers': ['console', 'file-api'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False,
        },
        'kubrick.debug': {  # custom
            'handlers': ['console', 'file-debug'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False,
        },
        'kubrick.notice': {  # custom
            'handlers': ['console', 'file-notice'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False,
        },
        'kubrick.celery': {  # custom
            'handlers': ['console', 'file-celery'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': False,
        },
    },
}
